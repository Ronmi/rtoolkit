package conenv

import (
	"bytes"
	"crypto/rsa"
	"encoding/gob"
	"fmt"
	"os"
	"testing"
)

var testRSAKey *rsa.PrivateKey

func init() {
	testRSAKey = &rsa.PrivateKey{}
	data := []byte{0x4b, 0xff, 0x87, 0x3, 0x1, 0x1, 0xa, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x1, 0xff, 0x88, 0x0, 0x1, 0x4, 0x1, 0x9, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x1, 0xff, 0x82, 0x0, 0x1, 0x1, 0x44, 0x1, 0xff, 0x84, 0x0, 0x1, 0x6, 0x50, 0x72, 0x69, 0x6d, 0x65, 0x73, 0x1, 0xff, 0x8a, 0x0, 0x1, 0xb, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x1, 0xff, 0x8c, 0x0, 0x0, 0x0, 0x24, 0xff, 0x81, 0x3, 0x1, 0x1, 0x9, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x1, 0xff, 0x82, 0x0, 0x1, 0x2, 0x1, 0x1, 0x4e, 0x1, 0xff, 0x84, 0x0, 0x1, 0x1, 0x45, 0x1, 0x4, 0x0, 0x0, 0x0, 0xa, 0xff, 0x83, 0x5, 0x1, 0x2, 0xff, 0x86, 0x0, 0x0, 0x0, 0x19, 0xff, 0x89, 0x2, 0x1, 0x1, 0xa, 0x5b, 0x5d, 0x2a, 0x62, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x1, 0xff, 0x8a, 0x0, 0x1, 0xff, 0x84, 0x0, 0x0, 0x48, 0xff, 0x8b, 0x3, 0x1, 0x1, 0x11, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1, 0xff, 0x8c, 0x0, 0x1, 0x4, 0x1, 0x2, 0x44, 0x70, 0x1, 0xff, 0x84, 0x0, 0x1, 0x2, 0x44, 0x71, 0x1, 0xff, 0x84, 0x0, 0x1, 0x4, 0x51, 0x69, 0x6e, 0x76, 0x1, 0xff, 0x84, 0x0, 0x1, 0x9, 0x43, 0x52, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1, 0xff, 0x90, 0x0, 0x0, 0x0, 0x1d, 0xff, 0x8f, 0x2, 0x1, 0x1, 0xe, 0x5b, 0x5d, 0x72, 0x73, 0x61, 0x2e, 0x43, 0x52, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1, 0xff, 0x90, 0x0, 0x1, 0xff, 0x8e, 0x0, 0x0, 0x31, 0xff, 0x8d, 0x3, 0x1, 0x1, 0x8, 0x43, 0x52, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1, 0xff, 0x8e, 0x0, 0x1, 0x3, 0x1, 0x3, 0x45, 0x78, 0x70, 0x1, 0xff, 0x84, 0x0, 0x1, 0x5, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x1, 0xff, 0x84, 0x0, 0x1, 0x1, 0x52, 0x1, 0xff, 0x84, 0x0, 0x0, 0x0, 0xfe, 0x4, 0xaa, 0xff, 0x88, 0x1, 0x1, 0xfe, 0x1, 0x1, 0x2, 0xce, 0x1b, 0x3e, 0xfd, 0x0, 0x4e, 0x51, 0x64, 0x5c, 0xa9, 0x76, 0xde, 0xe0, 0x62, 0xcd, 0x21, 0x3c, 0x9b, 0xdd, 0x19, 0xa8, 0xa, 0xec, 0xb4, 0xac, 0xa6, 0x77, 0x56, 0x81, 0x68, 0x63, 0x5c, 0x3e, 0x34, 0x20, 0x4e, 0xec, 0xb3, 0x89, 0xbb, 0x5d, 0x7e, 0xee, 0xa6, 0xc7, 0x38, 0x3e, 0x8c, 0x67, 0x98, 0x71, 0x11, 0xdc, 0x90, 0x50, 0xe7, 0xed, 0xb1, 0x91, 0xa5, 0x4a, 0xf1, 0x57, 0x64, 0x4a, 0xb7, 0x25, 0x25, 0x6, 0xff, 0x76, 0xc8, 0x51, 0x8b, 0xc, 0x95, 0xf, 0x64, 0xe, 0xbd, 0xcd, 0xd, 0xf3, 0x2b, 0x24, 0x61, 0x52, 0x1a, 0x6b, 0x65, 0x6a, 0x79, 0xa1, 0xd5, 0xea, 0xb3, 0x73, 0xcc, 0x5c, 0xe5, 0xb6, 0x3a, 0xdc, 0x15, 0xa8, 0x91, 0x6d, 0xd4, 0xe8, 0x71, 0xa5, 0x7b, 0x12, 0xc, 0x41, 0x14, 0x42, 0x22, 0xc3, 0xbb, 0x7, 0xf1, 0xad, 0x3d, 0x2e, 0x88, 0xaf, 0x9, 0xe7, 0x9d, 0x5f, 0x14, 0x26, 0xc4, 0x3e, 0x8e, 0x44, 0x6, 0x7b, 0x19, 0x23, 0x22, 0xeb, 0x95, 0x57, 0x1d, 0x7d, 0xa7, 0xb7, 0xa9, 0x95, 0x58, 0x77, 0x49, 0x28, 0xef, 0x85, 0x7c, 0x35, 0x11, 0x43, 0xe3, 0x79, 0xab, 0xbc, 0xc3, 0x60, 0x92, 0x9c, 0x9c, 0xd4, 0x67, 0x8, 0xc, 0x9b, 0xf, 0x5c, 0xe6, 0xe4, 0xd7, 0xad, 0x84, 0xcd, 0xee, 0x20, 0x6d, 0x59, 0xb8, 0x3a, 0xc4, 0x89, 0xaf, 0xbb, 0x70, 0xc6, 0x47, 0x22, 0x3e, 0x28, 0xc3, 0x62, 0x10, 0xb6, 0x7f, 0xa0, 0x2d, 0xce, 0x63, 0xf5, 0x7f, 0xdb, 0xc8, 0xc1, 0x54, 0xc9, 0xaf, 0xc5, 0x9, 0xd9, 0x58, 0xad, 0x7, 0x5, 0xe4, 0x4, 0x54, 0x37, 0x3b, 0xb1, 0xe3, 0xe6, 0x61, 0x8a, 0x84, 0xe9, 0x20, 0x8e, 0xe5, 0xb7, 0x9d, 0x78, 0xff, 0x37, 0x2d, 0xe2, 0xf0, 0x48, 0x6d, 0x29, 0xb8, 0x39, 0xa, 0xef, 0x97, 0xc9, 0xf3, 0x1, 0xfd, 0x2, 0x0, 0x2, 0x0, 0x1, 0xfe, 0x1, 0x1, 0x2, 0x5f, 0x64, 0xd2, 0xf1, 0x8c, 0xbb, 0xb3, 0x6, 0x4d, 0xb1, 0xd, 0xd8, 0xb8, 0x68, 0x62, 0x63, 0x18, 0xc7, 0x57, 0x3d, 0x71, 0xbe, 0xa4, 0xb2, 0x37, 0x1a, 0xd1, 0x2f, 0x53, 0xb3, 0xfa, 0x11, 0xe, 0xa5, 0x57, 0xb2, 0xcf, 0xf1, 0x85, 0x35, 0x18, 0x60, 0x10, 0x9b, 0x56, 0xa7, 0xdc, 0xa3, 0x65, 0xab, 0x73, 0xe1, 0xfd, 0x81, 0x3a, 0x41, 0x2e, 0x8d, 0xba, 0x48, 0x93, 0xf8, 0x42, 0x27, 0xa4, 0x41, 0x42, 0x4a, 0xf2, 0x3, 0x39, 0x7a, 0x1b, 0xeb, 0xcc, 0xc6, 0xd, 0x1a, 0x95, 0x8c, 0x19, 0xa5, 0x74, 0x40, 0x2a, 0x95, 0x74, 0xc7, 0xcf, 0x9f, 0x5f, 0xf9, 0xae, 0x2, 0xf1, 0x9f, 0x5f, 0x60, 0x5e, 0x3a, 0xdf, 0xee, 0x3c, 0x41, 0x36, 0x5, 0x21, 0x9d, 0xa2, 0x7c, 0x3f, 0x48, 0x48, 0x21, 0x2d, 0xd9, 0xef, 0x86, 0x61, 0xab, 0x66, 0x50, 0xe0, 0x8a, 0xe9, 0xc7, 0xcf, 0xa3, 0x63, 0x25, 0xcc, 0xaa, 0x46, 0x6e, 0x70, 0x1f, 0x70, 0xc7, 0x9f, 0x3b, 0xc7, 0x21, 0x30, 0x87, 0x83, 0x92, 0x6, 0x24, 0x5f, 0xe3, 0x13, 0x76, 0x1c, 0xb3, 0xdc, 0xf6, 0x4b, 0x0, 0x46, 0xbc, 0xcc, 0x58, 0x66, 0xda, 0x6e, 0x82, 0x38, 0x9c, 0xed, 0xc0, 0xcc, 0x41, 0xca, 0xe9, 0xe5, 0x4d, 0x5a, 0x16, 0xfe, 0x79, 0x1, 0x2b, 0xe0, 0x61, 0xc6, 0x6d, 0x6d, 0x6f, 0x86, 0x8, 0x33, 0xcf, 0x9f, 0x8b, 0xf4, 0xd7, 0xb7, 0xc2, 0x83, 0x83, 0xee, 0xbe, 0xc8, 0x3, 0xe6, 0x7a, 0xac, 0xb1, 0x62, 0xa2, 0x2, 0x64, 0x6b, 0x26, 0x42, 0xf6, 0x4d, 0xe9, 0xa7, 0xb1, 0x74, 0x30, 0x6e, 0x7, 0xd7, 0x4c, 0x29, 0x2c, 0xef, 0xa8, 0xa0, 0xcc, 0xde, 0x96, 0x71, 0xa, 0x84, 0xef, 0xbd, 0x4e, 0x1b, 0x18, 0xd4, 0x22, 0x33, 0x0, 0xe9, 0x59, 0x5b, 0x9a, 0xfe, 0x36, 0x4, 0xef, 0xa6, 0x19, 0x1, 0x2, 0xff, 0x81, 0x2, 0xce, 0xc5, 0x6a, 0x30, 0xec, 0xa0, 0x77, 0x1e, 0x10, 0xbd, 0xc0, 0xa7, 0x4d, 0x56, 0x9b, 0x36, 0x4c, 0xa5, 0x1, 0x45, 0xec, 0xb1, 0x72, 0x7c, 0x51, 0x7e, 0x5e, 0x39, 0x76, 0x20, 0x1f, 0xb6, 0x8a, 0x87, 0x10, 0x50, 0xe5, 0x1a, 0x85, 0xab, 0xe1, 0xc2, 0x47, 0x16, 0xdb, 0x9f, 0x8d, 0x19, 0x77, 0xfc, 0x9b, 0xf, 0xf, 0x63, 0xf9, 0x6e, 0xc3, 0x71, 0x92, 0x4f, 0x6c, 0xb0, 0xc6, 0xc, 0x18, 0x49, 0x24, 0xb0, 0x28, 0xa0, 0x52, 0xba, 0xcd, 0xf3, 0xea, 0x99, 0x41, 0x1c, 0x33, 0xec, 0x40, 0xfd, 0x9d, 0xc2, 0xd1, 0xb, 0x87, 0x57, 0x51, 0xa0, 0x9b, 0x91, 0x43, 0x19, 0xc8, 0x50, 0xfd, 0x25, 0xa2, 0x9c, 0x9a, 0xbe, 0xa4, 0x73, 0xe2, 0x84, 0x59, 0x1c, 0xc8, 0x5a, 0x7b, 0x1f, 0x91, 0x40, 0x6a, 0x96, 0x54, 0x21, 0x93, 0x81, 0x40, 0xfe, 0x10, 0x4e, 0xd4, 0x74, 0xd5, 0xe7, 0xff, 0x81, 0x2, 0xff, 0x2d, 0x51, 0x1b, 0x68, 0xb8, 0x7b, 0x27, 0x3d, 0x87, 0x80, 0x98, 0x8d, 0x9f, 0x59, 0xb0, 0xee, 0x15, 0x63, 0xcf, 0x91, 0x32, 0x30, 0x89, 0xfe, 0xa1, 0xe3, 0x3e, 0x71, 0xf2, 0x69, 0xa8, 0x4f, 0x21, 0x1f, 0xd, 0xb5, 0x99, 0x9e, 0xd7, 0xec, 0x74, 0xb3, 0xc2, 0x5e, 0x79, 0xcb, 0xed, 0x34, 0xdc, 0x71, 0x43, 0xad, 0xe4, 0xff, 0x27, 0x8a, 0xb3, 0xc, 0x13, 0x27, 0xcb, 0x4, 0x6, 0xdb, 0xfb, 0x87, 0xde, 0x51, 0x9d, 0x67, 0x40, 0x38, 0x10, 0x48, 0x51, 0xe7, 0xbe, 0x7c, 0xfc, 0xc5, 0x37, 0x47, 0xf3, 0xfb, 0x9f, 0x92, 0xf, 0xcb, 0x7f, 0x0, 0x88, 0xe, 0xec, 0x44, 0xa2, 0xd3, 0x6, 0x5e, 0xbb, 0xc2, 0xe5, 0x6a, 0x86, 0xfe, 0x38, 0x14, 0xec, 0x38, 0x7e, 0x70, 0x93, 0x0, 0x41, 0x2e, 0x73, 0x16, 0xc4, 0xf2, 0x8f, 0xfe, 0x43, 0x20, 0xb7, 0x8e, 0x48, 0x12, 0x15, 0x1, 0x1, 0xff, 0x81, 0x2, 0x62, 0xf1, 0xe3, 0x23, 0xf0, 0x47, 0xc5, 0x58, 0x94, 0xc8, 0x48, 0xa5, 0x86, 0x83, 0xb8, 0x18, 0x5e, 0xca, 0xe2, 0xf6, 0x14, 0x12, 0xc1, 0xe7, 0x2d, 0x94, 0x1c, 0x0, 0xc1, 0x3f, 0x14, 0xd, 0xe4, 0xf2, 0x46, 0xe3, 0x7f, 0xe, 0x97, 0x2, 0xae, 0x30, 0xaa, 0x96, 0xc, 0x98, 0xa8, 0xb, 0x94, 0xf8, 0x43, 0x37, 0xc, 0xb5, 0x59, 0x8a, 0x20, 0x6a, 0x7b, 0x8a, 0x18, 0x47, 0xeb, 0x2d, 0xa4, 0x7d, 0x73, 0xd9, 0xfc, 0x46, 0xe3, 0xef, 0xd2, 0x58, 0x33, 0x5e, 0xc, 0xe3, 0x33, 0x11, 0x8d, 0xf4, 0xf, 0x7, 0x47, 0xc3, 0x8d, 0x8b, 0x42, 0x5b, 0x69, 0xb6, 0x34, 0x76, 0xe4, 0xfd, 0xa4, 0x75, 0xda, 0xff, 0xb7, 0xa9, 0x1c, 0xc6, 0xfb, 0x91, 0x3b, 0x97, 0x63, 0x64, 0xb0, 0xe0, 0x65, 0x40, 0x7f, 0x0, 0xda, 0xd7, 0x8a, 0x5f, 0x62, 0xbb, 0x71, 0x10, 0x57, 0xe8, 0x64, 0xe7, 0x1, 0xff, 0x81, 0x2, 0xb4, 0xa8, 0x22, 0xa9, 0xe3, 0x3, 0xe8, 0xbc, 0xa9, 0x45, 0xb, 0x77, 0xf5, 0x9c, 0x1, 0x65, 0xcf, 0xc8, 0xf8, 0xf6, 0xf4, 0xf6, 0xb1, 0x82, 0xa0, 0xf1, 0x7f, 0xee, 0xaf, 0xc1, 0x4d, 0xa8, 0x49, 0xd, 0x4b, 0xec, 0xea, 0xca, 0xad, 0xb8, 0x74, 0xc1, 0x52, 0x9a, 0xa3, 0x44, 0x5b, 0x69, 0xbe, 0x68, 0xeb, 0xf, 0x5d, 0x47, 0xa8, 0x95, 0x18, 0xf, 0x16, 0xd7, 0x60, 0xee, 0xcc, 0x15, 0x7, 0x1d, 0x16, 0xde, 0x0, 0xae, 0xd, 0x71, 0x5b, 0xbf, 0xbb, 0x53, 0xb1, 0x5c, 0x1d, 0x24, 0xdf, 0x82, 0xf9, 0xbf, 0xf4, 0x3e, 0xce, 0xab, 0xbc, 0x8, 0x58, 0x19, 0xfb, 0x66, 0xae, 0x59, 0x10, 0x49, 0x8c, 0x3c, 0x26, 0x9, 0x41, 0xd7, 0xfc, 0x97, 0x3b, 0xc8, 0xd9, 0x5e, 0x3a, 0xd8, 0xf7, 0xef, 0x2d, 0xb1, 0x71, 0x47, 0x51, 0xeb, 0x3b, 0xb9, 0xce, 0xa9, 0xe5, 0x63, 0x84, 0xd9, 0x1, 0xff, 0x81, 0x2, 0x19, 0xe4, 0x7b, 0xa9, 0x17, 0x15, 0x20, 0xa6, 0x90, 0xe6, 0x81, 0x25, 0x38, 0x1d, 0x91, 0x9e, 0xec, 0x4f, 0x81, 0xdb, 0x7b, 0xb7, 0x2c, 0xec, 0x4e, 0x28, 0xc1, 0xb7, 0xd5, 0x54, 0x6d, 0xd7, 0x75, 0xe7, 0x95, 0x22, 0x6f, 0xc2, 0x96, 0xe6, 0x6d, 0x59, 0xd, 0x79, 0x37, 0xe3, 0xe5, 0xb7, 0xd, 0x33, 0x98, 0x23, 0x6f, 0x40, 0x27, 0xe3, 0x6f, 0x85, 0xcf, 0x6d, 0x29, 0xd5, 0x69, 0xf7, 0xe3, 0x35, 0xf4, 0xcd, 0x12, 0x9b, 0xfe, 0x68, 0x76, 0x9a, 0xad, 0x50, 0xe3, 0xe8, 0x37, 0x59, 0x42, 0x93, 0x3, 0xd3, 0x4c, 0xd9, 0xe3, 0x92, 0xe7, 0xb2, 0x26, 0x4c, 0xa5, 0x95, 0x1f, 0x2c, 0x43, 0xd1, 0x66, 0xa2, 0xae, 0x31, 0x48, 0xaa, 0x3f, 0x24, 0x54, 0x50, 0x7a, 0xf3, 0x3e, 0x6e, 0x76, 0x8a, 0xe2, 0xc3, 0x56, 0x14, 0x9f, 0x43, 0xed, 0xb1, 0xac, 0x17, 0xbb, 0xfa, 0x5b, 0xf, 0x0, 0x0}
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)
	dec.Decode(testRSAKey)
}

func TestRSA(t *testing.T) {
	key := testRSAKey
	plain := "my secret text"

	code, err := RSAEncrypt(&key.PublicKey, plain)
	if err != nil {
		t.Fatalf("unexpected error when encrypting: %s", err)
	}

	if code == plain {
		t.Fatalf("not encrypted!?")
	}

	val, err := RSADecrypt(key, code)
	if err != nil {
		t.Fatalf("unexpected error when decrypting: %s", err)
	}

	if val != plain {
		t.Fatalf(`expected text to be "%s", got "%s"`, plain, val)
	}
}

func ExampleRSAExtension() {
	type dbconf struct {
		Host string `env:"HOST"`
		Port int    `env:"PORT"`
		User string `env:"USER"`
		Pass string `env:"PASS,rsa"`
	}

	// using previously generated code and key
	key := testRSAKey

	// prepare envvar, simulating what you do in docker.
	os.Setenv("HOST", "127.0.0.1")
	os.Setenv("PORT", "3306")
	os.Setenv("USER", "user")
	os.Setenv("PASS", "udWcHR5nAWEqyKGUPRSw+TN4m+0yBiU3PywZ7PaMi2Rhxdkh9qHzIsaOEYf4u0GAEJTuhqcV5n7AErIcXAIHgU8Ov1IWpQUDFQvapXeBydiXeAzvW9TrkXehLNXxligLjkmV3yHTGRcQxu8UMzAX++QYPMa5yLZKzWU1gmmqJXYEuqDFv8k4VKL7AMf8OV7Jbe7k0ujNfvq5jAIQwI+bCibvFxrB2e373DuTfSfy/eqCw73rkmURmddpHvBZYV+/91Y7KnDLAG0qnKGYPYrgG/KnUGm5v/frBtpbr6ip+u2L/3EDY0tvP7qe2i0+CPjzzosKOe7xkIHO7s2QfxDQfA==")

	p := &Parser{}
	p.Register("rsa", RSAExtension(key)) // important!

	var conf dbconf
	p.Parse(&conf)
	fmt.Printf("%+v", conf)

	// output: {Host:127.0.0.1 Port:3306 User:user Pass:mysql password}
}
