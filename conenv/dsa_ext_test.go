package conenv

import (
	"bytes"
	"crypto/dsa"
	"encoding/gob"
	"fmt"
	"os"
	"testing"
)

var testDSAKey *dsa.PrivateKey

func init() {
	data := []byte{0x2e, 0xff, 0x81, 0x3, 0x1, 0x1, 0xa, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x1, 0xff, 0x82, 0x0, 0x1, 0x2, 0x1, 0x9, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x1, 0xff, 0x84, 0x0, 0x1, 0x1, 0x58, 0x1, 0xff, 0x88, 0x0, 0x0, 0x0, 0x2e, 0xff, 0x83, 0x3, 0x1, 0x1, 0x9, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x1, 0xff, 0x84, 0x0, 0x1, 0x2, 0x1, 0xa, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1, 0xff, 0x86, 0x0, 0x1, 0x1, 0x59, 0x1, 0xff, 0x88, 0x0, 0x0, 0x0, 0x2d, 0xff, 0x85, 0x3, 0x1, 0x1, 0xa, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1, 0xff, 0x86, 0x0, 0x1, 0x3, 0x1, 0x1, 0x50, 0x1, 0xff, 0x88, 0x0, 0x1, 0x1, 0x51, 0x1, 0xff, 0x88, 0x0, 0x1, 0x1, 0x47, 0x1, 0xff, 0x88, 0x0, 0x0, 0x0, 0xa, 0xff, 0x87, 0x5, 0x1, 0x2, 0xff, 0x8a, 0x0, 0x0, 0x0, 0xfe, 0x3, 0x5c, 0xff, 0x82, 0x1, 0x1, 0x1, 0xfe, 0x1, 0x1, 0x2, 0xad, 0xd6, 0xa8, 0x1a, 0x3b, 0x93, 0x7f, 0x5b, 0x6d, 0x44, 0x6d, 0x75, 0x8, 0x2c, 0x60, 0xc4, 0x24, 0x7f, 0x42, 0x55, 0x6, 0xe0, 0x84, 0x63, 0x0, 0x66, 0x5b, 0xd4, 0xbc, 0xbf, 0xbf, 0x3b, 0x88, 0x14, 0x17, 0xad, 0x88, 0xaa, 0x31, 0x11, 0x81, 0x5b, 0x6b, 0xa2, 0x9b, 0xcc, 0xb9, 0xdd, 0x5f, 0x98, 0xec, 0x82, 0x16, 0xd3, 0x63, 0xb3, 0xe5, 0x74, 0x54, 0xb, 0x7f, 0x9f, 0x9, 0x4d, 0x1d, 0x1c, 0xdb, 0x21, 0x23, 0x65, 0x81, 0xd6, 0x1e, 0x2, 0x70, 0x86, 0x56, 0x8a, 0xcb, 0x19, 0x94, 0xb0, 0x12, 0x60, 0x49, 0x58, 0xd1, 0x50, 0xa7, 0x36, 0x9, 0x71, 0x53, 0x63, 0xbd, 0xf7, 0xfd, 0x84, 0xbf, 0x70, 0x56, 0x30, 0xde, 0xca, 0x2b, 0x12, 0x50, 0xa4, 0xea, 0x11, 0x68, 0xf5, 0x4b, 0x1e, 0xb6, 0xac, 0x9c, 0x4f, 0x4, 0x5, 0x23, 0x17, 0xdf, 0xfd, 0xe7, 0x3b, 0x80, 0x79, 0x46, 0x48, 0x1d, 0x1c, 0x73, 0xf3, 0xef, 0xdb, 0x37, 0x11, 0xb1, 0xb3, 0x93, 0xf2, 0x4c, 0x6f, 0x2a, 0xa2, 0x7c, 0x95, 0x9b, 0x4a, 0x62, 0xac, 0x69, 0x88, 0x90, 0x5d, 0xf5, 0x14, 0xd9, 0x4, 0xae, 0xaf, 0x39, 0x19, 0x79, 0x2e, 0x1a, 0xbd, 0xc1, 0x75, 0x11, 0xd4, 0x52, 0xc2, 0x6, 0xf6, 0x69, 0xda, 0x23, 0x44, 0xae, 0x9c, 0x2a, 0xbf, 0xac, 0xa1, 0x58, 0xa0, 0x72, 0x1d, 0x9b, 0xd2, 0x94, 0xf2, 0x9b, 0x94, 0xb9, 0x72, 0xcb, 0xe8, 0xb, 0x56, 0xc2, 0x3a, 0xda, 0x88, 0x4e, 0x88, 0xbe, 0xb5, 0xc, 0x56, 0xcb, 0x22, 0x79, 0x7f, 0xac, 0x31, 0x41, 0x11, 0xd0, 0xf0, 0x25, 0xc6, 0x85, 0xb2, 0x15, 0xbe, 0xd3, 0xc0, 0xb4, 0x8a, 0x70, 0xf5, 0x41, 0xa0, 0x95, 0xaa, 0x47, 0x78, 0xcd, 0x2a, 0x3d, 0xed, 0x16, 0xcd, 0xf5, 0xde, 0xad, 0xd5, 0xe6, 0xa3, 0x6c, 0x3d, 0x24, 0xc7, 0x1, 0x21, 0x2, 0xd5, 0x9, 0x12, 0xd0, 0x62, 0xc4, 0x5a, 0xae, 0x1f, 0x39, 0xb1, 0xff, 0xc6, 0x59, 0xc0, 0x8b, 0x48, 0x6e, 0x4b, 0xff, 0x89, 0xbb, 0x60, 0xdd, 0x17, 0x32, 0x71, 0x31, 0xbd, 0xa0, 0xf7, 0xd3, 0x1, 0xfe, 0x1, 0x1, 0x2, 0x6b, 0xb8, 0x40, 0x7f, 0x41, 0x1, 0x2c, 0x14, 0x26, 0x29, 0xde, 0x4d, 0x74, 0x4, 0x5a, 0x2a, 0xef, 0xc3, 0x7f, 0x91, 0x66, 0x9b, 0xbc, 0x79, 0x6d, 0x55, 0xd8, 0x53, 0xcd, 0x93, 0x9, 0xd2, 0xdd, 0xaa, 0xdb, 0xf3, 0xdd, 0x42, 0x9c, 0x7b, 0x66, 0x4b, 0x80, 0x3f, 0x60, 0xf9, 0xd6, 0xaf, 0xf8, 0x73, 0x1d, 0x5, 0x7, 0x4b, 0xac, 0xd5, 0x49, 0xfc, 0xf7, 0x26, 0xab, 0x85, 0x59, 0x3a, 0x72, 0xf7, 0x52, 0xb9, 0x30, 0x53, 0xb4, 0x3, 0x4c, 0x48, 0x0, 0xa8, 0x9c, 0x2a, 0x23, 0xff, 0xa5, 0x2f, 0x7b, 0xe7, 0xb7, 0xae, 0x2f, 0xae, 0xad, 0xf4, 0x80, 0x88, 0x6d, 0x70, 0xf7, 0x35, 0xb6, 0x89, 0x8d, 0xd, 0x67, 0xb2, 0x81, 0x1a, 0x30, 0xbe, 0x1e, 0x76, 0x66, 0xd9, 0x5a, 0x88, 0x88, 0x8b, 0xea, 0xe5, 0xfc, 0xe1, 0x8, 0xcf, 0x5, 0xd4, 0xef, 0x6b, 0x1c, 0xaa, 0xac, 0xf2, 0x35, 0x13, 0x33, 0x78, 0x27, 0x7b, 0x3b, 0xa3, 0x16, 0xb5, 0x65, 0x33, 0xdc, 0x4, 0xdf, 0x89, 0xe8, 0x72, 0x2e, 0x4, 0xeb, 0xe2, 0x2e, 0x3a, 0xc1, 0x31, 0x6e, 0x15, 0x2e, 0x72, 0x9d, 0xa3, 0xa5, 0x2, 0x78, 0xfa, 0x37, 0x9c, 0xe8, 0xf7, 0xb5, 0x6c, 0xb5, 0x23, 0x7e, 0xf6, 0x72, 0xd6, 0xea, 0xa6, 0xc6, 0xae, 0x89, 0xde, 0x80, 0x14, 0x14, 0x3f, 0x8, 0x12, 0xc, 0x9b, 0x86, 0xfa, 0x0, 0x60, 0x3c, 0x7d, 0xef, 0x18, 0xfc, 0x11, 0x79, 0x7e, 0xcc, 0x6a, 0x2e, 0xd7, 0xd8, 0x40, 0xc8, 0x79, 0x69, 0x59, 0x80, 0x6b, 0xbd, 0xba, 0x2b, 0x34, 0x53, 0xf1, 0xe7, 0xde, 0x84, 0x10, 0x3d, 0xaa, 0x2f, 0xbd, 0x91, 0xf3, 0x77, 0xd9, 0x31, 0x20, 0xdc, 0xa7, 0x1d, 0xf2, 0x60, 0x17, 0x2a, 0xd7, 0xc5, 0x95, 0xf2, 0x55, 0xe8, 0xf7, 0x7b, 0x71, 0x87, 0xe1, 0xac, 0x48, 0xb0, 0x57, 0x0, 0x1, 0xfe, 0x1, 0x1, 0x2, 0x3f, 0x8e, 0xb0, 0xa0, 0x25, 0xb8, 0x7d, 0x99, 0xde, 0x1d, 0xb2, 0xd4, 0x24, 0x82, 0xf, 0x36, 0xb1, 0xec, 0xe1, 0x78, 0x9c, 0x3d, 0xf3, 0xda, 0xfe, 0x5c, 0xfb, 0xfa, 0xd6, 0xef, 0xd1, 0x65, 0xeb, 0x8e, 0x18, 0x38, 0x53, 0x1d, 0x9c, 0x11, 0x49, 0x7b, 0xf0, 0xbd, 0x77, 0xc4, 0xf, 0xaa, 0xba, 0x25, 0x93, 0x50, 0xa6, 0xfd, 0xde, 0x78, 0xee, 0x36, 0xe1, 0x9d, 0x2a, 0x36, 0x37, 0xcd, 0xdc, 0x74, 0xd8, 0xe9, 0x27, 0xc8, 0xd1, 0xfc, 0xf0, 0xfe, 0x71, 0x33, 0x9f, 0xa3, 0xd4, 0x25, 0x4e, 0xa5, 0xca, 0x54, 0xa3, 0xcb, 0xfa, 0xa0, 0xd6, 0x58, 0xc4, 0x77, 0x5, 0xce, 0xf, 0xb2, 0x5a, 0x3b, 0x61, 0xe1, 0x5f, 0x3a, 0xd2, 0x9, 0x75, 0xa9, 0x21, 0xe0, 0x46, 0x37, 0x27, 0x97, 0xfc, 0xab, 0x87, 0x33, 0xa6, 0x8d, 0x4c, 0x4d, 0x54, 0xb1, 0xcc, 0xe2, 0x2b, 0x6d, 0xb8, 0x58, 0x7b, 0xa5, 0x83, 0x87, 0xb8, 0xd0, 0xae, 0x0, 0xd7, 0x29, 0x32, 0xf7, 0xa4, 0x2a, 0x43, 0xd3, 0x8a, 0x67, 0x4d, 0xc1, 0x5d, 0xf, 0x6e, 0x1, 0x22, 0x21, 0xde, 0x75, 0xae, 0x2f, 0x1a, 0x31, 0x7f, 0xaa, 0x2f, 0xe3, 0x5f, 0x2d, 0xa6, 0xca, 0x99, 0xa6, 0xcf, 0xb9, 0x91, 0x47, 0x6c, 0xd8, 0x94, 0xed, 0xdf, 0x34, 0xde, 0x10, 0x74, 0x92, 0x7e, 0x1f, 0x72, 0xbc, 0xa3, 0x5e, 0xd1, 0x58, 0x38, 0x59, 0xa7, 0x85, 0xbe, 0xea, 0xc2, 0x2, 0xae, 0x19, 0x1c, 0xb5, 0xb1, 0xae, 0x7a, 0xb0, 0xb3, 0x1b, 0x59, 0xdf, 0xe6, 0xef, 0xec, 0x95, 0xdf, 0x31, 0x83, 0x3d, 0xae, 0xe8, 0xb3, 0xd1, 0x24, 0x43, 0x23, 0x1, 0xd4, 0xdd, 0x2c, 0x7, 0x49, 0xf4, 0xac, 0xee, 0xb7, 0xbf, 0xdc, 0x10, 0xb8, 0xab, 0x41, 0x38, 0xb7, 0xbb, 0x68, 0xe7, 0xc1, 0xbe, 0xb1, 0xed, 0x6e, 0xb, 0xb4, 0x8b, 0x0, 0x1, 0x21, 0x2, 0x62, 0x93, 0x41, 0xeb, 0xdf, 0x68, 0x8c, 0x51, 0x7b, 0x23, 0xde, 0xcb, 0x6d, 0x20, 0x84, 0x87, 0x3b, 0xa4, 0x33, 0x28, 0xe0, 0x88, 0x81, 0x9, 0xec, 0x51, 0xae, 0x21, 0x60, 0xb5, 0x4f, 0x8a, 0x0}

	testDSAKey = &dsa.PrivateKey{}
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)
	dec.Decode(testDSAKey)
}

func TestDSA(t *testing.T) {
	key := testDSAKey
	plain := "my secret text"

	code, err := DSASign(key, plain)
	if err != nil {
		t.Fatalf("unexpected error when signing: %s", err)
	}

	if code == plain {
		t.Fatalf("not signed!?")
	}

	if err = DSAVerify(&key.PublicKey, plain, code); err != nil {
		t.Fatalf("unexpected error when verifying: %s", err)
	}
}

func ExampleDSAExtension() {
	type dbconf struct {
		Host string `env:"HOST"`
		Port int    `env:"PORT"`
		User string `env:"USER"`
		Pass string `env:"PASS,dsa"`
	}

	// generating dsa key is time consuming, so we use previously generated key
	// here.
	key := testDSAKey
	code, _ := DSASign(key, "mysql password")

	// prepare envvar, simulating what you do in docker.
	os.Setenv("HOST", "127.0.0.1")
	os.Setenv("PORT", "3306")
	os.Setenv("USER", "user")
	os.Setenv("PASS", "mysql password")
	os.Setenv("PASS_SIGN", code)

	p := &Parser{}
	p.Register("dsa", DSAExtension(&key.PublicKey)) // important!

	var conf dbconf
	p.Parse(&conf)
	fmt.Printf("%+v", conf)

	// output: {Host:127.0.0.1 Port:3306 User:user Pass:mysql password}
}
